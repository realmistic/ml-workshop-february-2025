name: Daily Database Update

on:
  schedule:
    # Run at 1:00 UTC every day
    - cron: '0 1 * * *'
  workflow_dispatch:  # Allow manual triggering

jobs:
  update_database:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Update market data from external sources
        env:
          SQLITECLOUD_URL: ${{ secrets.SQLITECLOUD_URL }}
          USE_SQLITECLOUD: "1"
        run: |
          # Force update from external sources directly to SQLite Cloud
          echo "Updating market data from external sources directly to SQLite Cloud..."
          python -u scripts/update_data.py
          
          # Show the latest date in the SQLite Cloud database
          python -c "
          import os
          import pandas as pd
          os.environ['USE_SQLITECLOUD'] = '1'
          from db_connection import get_db_connection
          conn = get_db_connection()
          latest_date = pd.read_sql_query('SELECT MAX(date) as max_date FROM raw_market_data', conn).iloc[0]['max_date']
          print(f'Latest data date in SQLite Cloud: {latest_date}')
          conn.close()
          "
      
      - name: Train models with updated data
        env:
          SQLITECLOUD_URL: ${{ secrets.SQLITECLOUD_URL }}
          USE_SQLITECLOUD: "1"
        run: |
          echo "Training models with updated data directly in SQLite Cloud..."
          python -u scripts/train_models.py
          
          # Show the number of predictions in SQLite Cloud
          python -c "
          import os
          import pandas as pd
          os.environ['USE_SQLITECLOUD'] = '1'
          from db_connection import get_db_connection
          conn = get_db_connection()
          for model in ['arima', 'prophet', 'dnn']:
              try:
                  count = pd.read_sql_query(f'SELECT COUNT(*) as count FROM {model}_predictions', conn).iloc[0]['count']
                  print(f'{model.upper()} predictions in SQLite Cloud: {count} rows')
              except Exception as e:
                  print(f'Error getting {model} prediction count: {str(e)}')
          conn.close()
          "
      
      - name: Initialize and Sync to SQLite Cloud
        env:
          SQLITECLOUD_URL: ${{ secrets.SQLITECLOUD_URL }}
          USE_SQLITECLOUD: "1"
        run: |
          # Initialize the cloud database (with detailed output)
          echo "Initializing SQLite Cloud database..."
          python -u scripts/init_cloud_db.py
          
          # Sync data to the cloud (with detailed output)
          echo "Syncing data to SQLite Cloud..."
          python -u scripts/sync_to_cloud.py
          
          # Verify the sync
          echo "Verifying the sync..."
          python -c "
          import os
          import sys
          import pandas as pd
          os.environ['USE_SQLITECLOUD'] = '1'
          from db_connection import get_db_connection
          try:
              conn = get_db_connection()
              cursor = conn.cursor()
              cursor.execute('SELECT name FROM sqlite_master WHERE type=\"table\"')
              tables = [row[0] for row in cursor.fetchall()]
              print(f'Tables in SQLite Cloud: {tables}')
              
              if 'raw_market_data' in tables:
                  # Check row count
                  cursor.execute('SELECT COUNT(*) FROM raw_market_data')
                  count_result = cursor.fetchone()
                  if count_result is not None:
                      print(f'Verified {count_result[0]} rows in raw_market_data table')
                  else:
                      print('WARNING: Could not get row count for raw_market_data table')
                  
                  # Check latest date
                  try:
                      latest_date = pd.read_sql_query('SELECT MAX(date) as max_date FROM raw_market_data', conn).iloc[0]['max_date']
                      print(f'Latest data date in SQLite Cloud: {latest_date}')
                  except Exception as e:
                      print(f'WARNING: Could not get latest date: {str(e)}')
                  
                  # Check prediction counts
                  for model in ['arima', 'prophet', 'dnn']:
                      try:
                          count = pd.read_sql_query(f'SELECT COUNT(*) as count FROM {model}_predictions', conn).iloc[0]['count']
                          print(f'{model.upper()} predictions in SQLite Cloud: {count} rows')
                      except Exception as e:
                          print(f'WARNING: Could not get {model} prediction count: {str(e)}')
              else:
                  print('ERROR: raw_market_data table not found')
                  sys.exit(1)
              
              conn.close()
              print('Verification completed successfully')
          except Exception as e:
              import traceback
              print(f'ERROR: {str(e)}')
              traceback.print_exc()
              sys.exit(1)
          "
      
      # No commit step needed - we only sync to SQLite Cloud

name: Daily Database Update

on:
  schedule:
    # Run at 1:00 UTC every day
    - cron: '0 1 * * *'
  workflow_dispatch:  # Allow manual triggering

jobs:
  update_database:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Update market data
        run: python scripts/update_data.py
      
      - name: Train models
        run: python scripts/train_models.py
      
      - name: Initialize and Sync to SQLite Cloud
        env:
          SQLITECLOUD_URL: ${{ secrets.SQLITECLOUD_URL }}
          USE_SQLITECLOUD: "1"
        run: |
          # Initialize the cloud database (with detailed output)
          echo "Initializing SQLite Cloud database..."
          python -u scripts/init_cloud_db.py
          
          # Sync data to the cloud (with detailed output)
          echo "Syncing data to SQLite Cloud..."
          python -u scripts/sync_to_cloud.py
          
          # Verify the sync
          echo "Verifying the sync..."
          python -c "
          import os
          import sys
          os.environ['USE_SQLITECLOUD'] = '1'
          from db_connection import get_db_connection
          try:
              conn = get_db_connection()
              cursor = conn.cursor()
              cursor.execute('SELECT name FROM sqlite_master WHERE type=\"table\"')
              tables = [row[0] for row in cursor.fetchall()]
              print(f'Tables in SQLite Cloud: {tables}')
              if 'raw_market_data' in tables:
                  cursor.execute('SELECT COUNT(*) FROM raw_market_data')
                  print(f'Verified {cursor.fetchone()[0]} rows in raw_market_data table')
              else:
                  print('ERROR: raw_market_data table not found')
                  sys.exit(1)
              conn.close()
          except Exception as e:
              print(f'ERROR: {str(e)}')
              sys.exit(1)
          "
      
      - name: Commit and push changes to local database
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add data/market_data.db
          git commit -m "Update market data and predictions" || echo "No changes to commit"
          
          # Use GitHub token for authentication
          git remote set-url origin https://x-access-token:${{ github.token }}@github.com/${{ github.repository }}
          git push
